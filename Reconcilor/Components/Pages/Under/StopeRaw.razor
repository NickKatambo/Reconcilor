@page "/stoperaw"
@using Reconcilor.Application
@using Reconcilor.Application.Interfaces
@using Reconcilor.Application.Services

<PageTitle>Underground Stopes Raw</PageTitle>

<RadzenAlert Variant="Variant.Filled" Icon="assignment_returned" AlertStyle="AlertStyle.Dark" Size="AlertSize.Medium" Shade="Shade.Dark" AllowClose=false>
    Underground Stopes Raw
</RadzenAlert>
<RadzenCard class="rz-mx-auto rz-base-lighter">
    <RadzenRow>
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="Stope/Dev" Variant="@variant" Component="DropDownDataGridColumns">
                    <RadzenDropDownDataGrid @bind-Value=@stopeRaw.StopeId Data=@StopeDefinitions Placeholder="Choose One" TextProperty="@nameof(StopeDefinition.StopeID)" 
                    ValueProperty="@nameof(StopeDefinition.Id)"
                                            AllowColumnResize="true" AllowFilteringByAllStringColumns="true" Name="DropDownDataGridColumns">
                        <Columns>
                            <RadzenDropDownDataGridColumn Property="StopeDefinition.Shaft.ShaftName" SortProperty="@nameof(StopeDefinition.ShaftId)" Title="Shaft" Width="100px" />
                            <RadzenDropDownDataGridColumn Property="StopeDefinition.Level.LevelDescription" SortProperty="@nameof(StopeDefinition.LevelId)" Title="Level" Width="100px" />
                            <RadzenDropDownDataGridColumn Property="@nameof(StopeDefinition.StopeID)" Title="Stope ID" Width="120px" />
                            <RadzenDropDownDataGridColumn Property="StopeDefinition.Mining.Description" SortProperty="@nameof(StopeDefinition.MiningId)" Title="Activity" Width="150px" />
                            <RadzenDropDownDataGridColumn Property="StopeDefinition.MineModel.ModelDescription" SortProperty="@nameof(StopeDefinition.MineModelId)" Title="Model" Width="150px" />
                        </Columns>
                    </RadzenDropDownDataGrid>
                </RadzenFormField>
                <RadzenFormField Text="Shift" Variant="@variant">
                    <RadzenDropDown @bind-Value=@stopeRaw.ShiftId Data=@shiftList Placeholder="Choose Shift"
                                    TextProperty="@nameof(Shift.ShiftName)" ValueProperty="@nameof(Shift.Id)" Name="DropDownBindValue">
                    </RadzenDropDown>
                </RadzenFormField>
                <RadzenFormField Text="Production Date" Variant="@variant">
                    <RadzenDatePicker @bind-Value="@stopeRaw.DateEntered" DateFormat="dd-MMM-yyyy" Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                </RadzenFormField>
                <RadzenFormField Text="Ticket No" Variant="@variant">
                    <RadzenTextBox @bind-Value="@stopeRaw.TicketNo" Placeholder="Enter ticket number here" />
                </RadzenFormField>
                <RadzenStack>
                    <RadzenButton ButtonType="ButtonType.Submit" Click="@SubmitData" Icon="check_circle" Size="ButtonSize.Medium" Text="Submit" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                </RadzenStack>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="Tonnes" Variant="@variant">
                    <RadzenNumeric @bind-Value="@stopeRaw.Tonnes" Min="0" Max="1000000" />
                </RadzenFormField>
                <RadzenFormField Text="TCu (%)" Variant="@variant">
                    <RadzenNumeric @bind-Value="@stopeRaw.TCu" Min="0" Max="1000000" />
                </RadzenFormField>
                <RadzenFormField Text="TCo (%)" Variant="@variant">
                    <RadzenNumeric @bind-Value="@stopeRaw.TCo" Min="0" Max="1000000" />
                </RadzenFormField>
                <RadzenFormField Text="Comment" Variant="@variant">
                    <RadzenTextBox @bind-Value="@stopeRaw.Comment" Placeholder="Enter comment here" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

<RadzenCard class="mt-3">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenDataGrid @ref="dataGrid" Data="@StopeRawList.OrderByDescending(x => x.DateEntered)" TItem="UGStopesRaw" AllowPaging="true" AllowSorting="true" PageSize="6" AllowColumnResize="true"
                        AllowFiltering="true" FilterMode="FilterMode.Advanced" PagerHorizontalAlign="HorizontalAlign.Center" ColumnWidth="auto" IsLoading=@isLoading
                        ShowPagingSummary="true" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="UGStopesRaw" Title="Shaft" Sortable="true" Property="Stope.Shaft.ShaftName" >
                    <Template>
                        @context.Stope.Shaft.ShaftName
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UGStopesRaw" Property="DateEntered" Title="Date" FormatString="{0:g}" Frozen="true" />
                <RadzenDataGridColumn TItem="UGStopesRaw" Title="Level" Sortable="true" Property="Stope.Level.LevelDescription" Frozen="true">
                    <Template>
                        @context.Stope.Level.LevelDescription
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UGStopesRaw" Title="Shift" Sortable="true" Property="Shift.ShiftName" Frozen="true">
                    <Template>
                        @context.Shift.ShiftName
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UGStopesRaw" Title="Stope ID" Sortable="true" Property="Stope.StopeID" Frozen="true">
                    <Template>
                        @context.Stope.StopeID
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UGStopesRaw" Property="TicketNo" Title="Ticket No" Frozen="true" />
                <RadzenDataGridColumn TItem="UGStopesRaw" Property="Tonnes" Title="Tonnes" FormatString="{0:0,##.00}" Filterable="false" Frozen="true" />
                <RadzenDataGridColumn TItem="UGStopesRaw" Property="TCu" Title="TCu %" Filterable="false" Frozen="true" />
                <RadzenDataGridColumn TItem="UGStopesRaw" Property="TCo" Title="TCo %" Filterable="false" Frozen="true" />
                <RadzenDataGridColumn TItem="UGStopesRaw" Property="Cu" Title="Cu" Filterable="false" Frozen="true" FormatString="{0:0,##.00}" />
                <RadzenDataGridColumn TItem="UGStopesRaw" Property="Co" Title="Co" Filterable="false" Frozen="true" FormatString="{0:0,##.00}" />
                <RadzenDataGridColumn TItem="UGStopesRaw" Property="Comment" Title="Comment" Frozen="true" />
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
</RadzenCard>

@code {

    [Inject] private IReconcilorRepository _repository { get; set; } = default!;
    [Inject] protected DialogService DialogService { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; }
    [Inject] protected StockPileService stockPileService { get; set; } = default!;

    protected RadzenDataGrid<UGStopesRaw> dataGrid;
    protected Variant variant = Variant.Outlined;
    protected UGStopesRaw stopeRaw = new() { DateEntered = DateTime.Now };
    protected List<Shift> shiftList;
    protected IEnumerable<UGStopesRaw> StopeRawList = Enumerable.Empty<UGStopesRaw>();
    IEnumerable<StopeDefinition> StopeDefinitions;
    protected bool isLoading = false;
    protected DateTime? dateFilter;

    private int selectedShaftId;
    private int selectedLevelId;

    private async Task OnShaftChange(int shaftId)
    {
        selectedShaftId = shaftId;
        var query = await stockPileService.GetLevelsAsync();
    }

    async Task SubmitData()
    {
        try
        {
            if (stopeRaw.StopeId == 0)
            {
                AlertMessage("Select Shaft/Level/Stope/Dev from the list", NotificationSeverity.Warning);
                return;
            }
            if (stopeRaw.ShiftId == 0)
            {
                AlertMessage("Select Shift from the list", NotificationSeverity.Warning);
                return;
            }
            if (string.IsNullOrEmpty(stopeRaw.TicketNo))
            {
                AlertMessage("Ticket number is a required field", NotificationSeverity.Warning);
                return;
            }
            else
            {
                try
                {
                    stopeRaw.Id = 0;
                    stopeRaw.EnteredOn = DateTime.Now;
                    stopeRaw.EnteredBy = "admin";
                    stopeRaw.Co = ReconUtility.CalculateTotalGrade(stopeRaw.TCo, stopeRaw.Tonnes);
                    stopeRaw.Cu = ReconUtility.CalculateTotalGrade(stopeRaw.TCu, stopeRaw.Tonnes);

                    var result = _repository.SaveDataAsync(stopeRaw);
                    if (result is not null && result.Result is not null)
                    {
                        AlertMessage("Stope Raw saved successfully", NotificationSeverity.Success);
                        stopeRaw = new()
                        {
                            DateEntered = DateTime.Now
                        };

                        await LoadDataAsync();
                        await dataGrid.Reload();
                    }
                    else
                    {
                        AlertMessage("Error while saving stope development", NotificationSeverity.Error);
                        return;
                    }
                }
                catch (Exception ex)
                {
                    AlertMessage($"Error: {ex.Message} | Detail: {ex.InnerException ?? null}", NotificationSeverity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            AlertMessage($"Error: {ex.Message} | Detail: {ex.InnerException ?? null}", NotificationSeverity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            AlertMessage($"An error occurred while initializing {ex.Message}", NotificationSeverity.Warning);
            throw;
        }
    }

    private void OnLevelChange(int levelId)
    {

    }

    protected async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            shiftList = await stockPileService.GetShiftAsync();
            StopeDefinitions = await stockPileService.GetStopeDefinationAsync();
            StopeRawList = await stockPileService.GetStopeRawAsync();
        }
        catch (Exception ex)
        {
            AlertMessage($"Error while loading data {ex}", NotificationSeverity.Warning);
            throw;
        }
        finally
        {
            isLoading = false;
        }
    }

    void ShowNotification(NotificationMessage message) => NotificationService.Notify(message);

    void AlertMessage(string msg, NotificationSeverity severity)
    {
        ShowNotification(new NotificationMessage
            {
                Severity = severity,
                Summary = "Reconcilor",
                Detail = $"{msg ?? "No message"}",
                Duration = 4000
            });
    }
}
