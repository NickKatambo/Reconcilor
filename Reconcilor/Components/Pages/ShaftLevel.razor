@page "/level"

@using Reconcilor.Application
@using Reconcilor.Application.Interfaces
@using Reconcilor.Application.Services

<RadzenAlert Variant="Variant.Filled" Icon="list" AlertStyle="AlertStyle.Dark" Size="AlertSize.Medium" Shade="Shade.Dark" AllowClose=false>
    Levels
</RadzenAlert>

<RadzenCard class="rz-mx-auto rz-base-lighter">
    <RadzenRow>
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="Shaft" Variant="@variant">
                    <RadzenDropDown @bind-Value=@newLevel.ShaftId Data=@shaftList Placeholder="Choose Shaft"
                                    TextProperty="@nameof(Shaft.ShaftName)" ValueProperty="@nameof(Shaft.ShaftId)" Name="DropDownBindValue">
                    </RadzenDropDown>
                </RadzenFormField>
                <RadzenStack>
                    <RadzenButton ButtonType="ButtonType.Submit" Click="@SubmitData" Icon="check_circle" Size="ButtonSize.Medium" Text="Submit" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                </RadzenStack>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="Level" Variant="@variant" title="Level">
                    <RadzenTextBox @bind-Value="@newLevel.LevelDescription" Placeholder="Enter level name here" Style="width: 100%;" />
                </RadzenFormField>

            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

<RadzenCard class="mt-3">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0">
        <RadzenDataGrid @ref="dataGrid" Data="@levelList.OrderByDescending(x => x.LevelId)" TItem="Level" AllowPaging="true" AllowSorting="true" PageSize="10" AllowColumnResize="true"
                        AllowFiltering="true" FilterMode="FilterMode.Advanced" PagerHorizontalAlign="HorizontalAlign.Center" ColumnWidth="auto" IsLoading=@isLoading
                        ShowPagingSummary="true" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="Level" Title="Shaft" Sortable="true" Property="Shaft.ShaftName">
                    <Template>
                        @context.Shaft.ShaftName
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Level" Property="@nameof(Level.LevelDescription)" Title="Level" Frozen="true" />
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
</RadzenCard>

@code {
    [Inject] private IReconcilorRepository _repository { get; set; } = default!;
    [Inject] protected DialogService DialogService { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; }
    [Inject] protected StockPileService stockPileService { get; set; } = default!;

    public Level newLevel = new();
    private Variant variant = Variant.Outlined;
    private IEnumerable<Level> levelList = Enumerable.Empty<Level>();
    private RadzenDataGrid<Level> dataGrid;
    protected int count;
    protected List<Shaft> shaftList;
    protected bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    void AlertMessage(string msg, NotificationSeverity severity)
    {
        ShowNotification(new NotificationMessage
            {
                Severity = severity,
                Summary = "Reconcilor",
                Detail = $"{msg ?? "No message"}",
                Duration = 4000
            });
    }

    async Task SubmitData()
    {
        try
        {
            if (string.IsNullOrEmpty(newLevel.LevelDescription))
            {
                AlertMessage("Level is a required field", NotificationSeverity.Warning);
                return;
            }
            else
            {
                try
                {
                    newLevel.LevelId = 0;
                    var result = _repository.SaveDataAsync(newLevel);
                    if (result is not null && result.Result is not null)
                    {
                        AlertMessage("Level added successfully", NotificationSeverity.Success);
                        newLevel = new();

                        await LoadDataAsync();
                        await dataGrid.Reload();
                    }
                    else
                    {
                        AlertMessage("Error while saving level", NotificationSeverity.Error);
                        return;
                    }
                }
                catch (Exception ex)
                {
                    AlertMessage($"Error: {ex.Message} | Detail: {ex.InnerException ?? null}", NotificationSeverity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            AlertMessage($"Error: {ex.Message} | Detail: {ex.InnerException ?? null}", NotificationSeverity.Error);
        }
    }

    protected async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            shaftList = await stockPileService.GetShaftAsync();
            levelList = await stockPileService.GetLevelsAsync();
        }
        catch (Exception ex)
        {
            AlertMessage("Opening tonnes cannot be less than zero (0)", NotificationSeverity.Warning);
            throw;
        }
        finally
        {
            isLoading = false;
        }
    }

}
