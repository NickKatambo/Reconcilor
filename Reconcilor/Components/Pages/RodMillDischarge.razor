@page "/rmd"
@using Reconcilor.Application
@using Reconcilor.Application.Interfaces

@inject NotificationService NotificationService

<RadzenAlert Variant="Variant.Filled" Icon="assignment_returned" AlertStyle="AlertStyle.Dark" Size="AlertSize.Medium" Shade="Shade.Dark" AllowClose=false>
    Rod Mill Discharge (RMD)
</RadzenAlert>
<RadzenCard class="rz-mx-auto rz-p-md-12 rz-base-lighter">
    <RadzenRow >
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="Date From" Variant="@variant">
                    <RadzenDatePicker @bind-Value="@rodMill.DateFrom" DateFormat="dd/MMM/yyyy" Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                </RadzenFormField>
                <RadzenFormField Text="Tonnes" Variant="@variant" title="Tonnes hoisted">
                    <RadzenNumeric @bind-Value="@rodMill.Tonnes" title="Tonnes hoisted" />
                </RadzenFormField>
                <RadzenFormField Text="Cu or Contained Cu" Variant="@variant" title="Contained Cu">
                    <RadzenNumeric @bind-Value="@rodMill.Cu" title="Contained Cu" Min="0" Max="100" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="Date To" Variant="@variant">
                    <RadzenDatePicker @bind-Value="@rodMill.DateTo" DateFormat="dd/MMM/yyyy" Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                </RadzenFormField>
                <RadzenFormField Text="Co Grade or Contained Co" Variant="@variant" title="Contained Co">
                    <RadzenNumeric @bind-Value="@rodMill.Co" title="Contained Co" Min="0" Max="100" />
                </RadzenFormField>
                <RadzenFormField Text="Comment" Variant="@variant">
                    <RadzenTextArea @bind-Value="@rodMill.Comment" Placeholder="Enter comment here..." />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack class="mt-1" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal">
        <RadzenButton ButtonType="ButtonType.Submit" Click="@SubmitData" Text="Submit"></RadzenButton>
    </RadzenStack>
</RadzenCard>

<RadzenCard class="mt-3">
    <RadzenStack Orientation="Orientation.Horizontal">
       <RadzenDataGrid @ref="dataGrid" Data="@rodMillDischargeList.OrderByDescending(x => x.Id)" TItem="RMD" AllowPaging="true" AllowSorting="true" PageSize="10" AllowColumnResize="true"
                        AllowFiltering="true" FilterMode="FilterMode.Advanced" PagerHorizontalAlign="HorizontalAlign.Center" ColumnWidth="auto" IsLoading=@isLoading
                        ShowPagingSummary="true" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
@*                 <RadzenDataGridColumn Property="@nameof(RMD.Id)" HeaderCssClass="rz-secondary-light" Filterable="false" Title="ID" Frozen="true" TextAlign="TextAlign.Center" Width="100px" />
 *@             <RadzenDataGridColumn Property="@nameof(RMD.DateFrom)" Title="Date From" FormatString="{0:d}" Frozen="true" />
                <RadzenDataGridColumn Property="@nameof(RMD.DateTo)" Title="Date To" FormatString="{0:d}" Frozen="true" />
                <RadzenDataGridColumn Property="@nameof(RMD.Tonnes)" Title="DMT" Frozen="true" />
                <RadzenDataGridColumn Property="@nameof(RMD.Cu)" Title="Cu %" Frozen="true" />
                <RadzenDataGridColumn Property="@nameof(RMD.TCu)" Title="TCu %" Frozen="true" FormatString="{0:0.##}" />
                <RadzenDataGridColumn Property="@nameof(RMD.Co)" Title="Co %" Frozen="true" />
                <RadzenDataGridColumn Property="@nameof(RMD.TCo)" Title="TCo %" Frozen="true" FormatString="{0:0.##}" />
                @* <RadzenDataGridColumn Property="@nameof(RMD.EnteredOn)" Title="Logged On" Frozen="true" /> *@
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
</RadzenCard>

@code {
    Variant variant = Variant.Outlined;
    public RMD rodMill = new();
    [Inject] private IReconcilorRepository _repository { get; set; } = default!;
    [Inject] protected DialogService DialogService { get; set; } = default!;

    protected int count;
    private IEnumerable<RMD> rodMillDischargeList = Enumerable.Empty<RMD>();
    private RadzenDataGrid<RMD> dataGrid;
    protected bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        rodMill.DateFrom = DateTime.Now;
        rodMill.DateTo = DateTime.Now;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            rodMillDischargeList = await _repository.GetDataAsync<RMD>();
            count = rodMillDischargeList.Count();
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isLoading = false;
        }
    }

    protected async Task EditRow(RMD args)
    {
        //await DialogService.OpenAsync<EditRMD>("Edit RMD", new Dictionary<string, object> { { "Id", args.Id } });
        await dataGrid.Reload();
    }

    protected async Task Grid0LoadData(LoadDataArgs args)
    {
        try
        {
            rodMillDischargeList = await _repository.GetDataAsync<RMD>();
            count = rodMillDischargeList.Count();
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Error", Detail = $"Unable to load RMDs" });
        }
    }

    async Task SubmitData()
    {
        try
        {
            rodMill.Id = 0;
            rodMill.EnteredOn = DateTime.Now;
            rodMill.EnteredBy = "admin";
            rodMill.TCu = ReconUtility.CalculateTotalGrade(rodMill.Cu, rodMill.Tonnes);
            rodMill.TCo = ReconUtility.CalculateTotalGrade(rodMill.Co, rodMill.Tonnes);

            var result = _repository.SaveDataAsync(rodMill);
            if (result is not null && result.Result is not null)
            {
                AlertMessage("RMD results saved successfully", NotificationSeverity.Success);
                rodMill = new();
                rodMill.DateFrom = DateTime.Now;
                rodMill.DateTo = DateTime.Now;

                await LoadDataAsync();
                await dataGrid.Reload();
            }
            else
            {
                AlertMessage("Error saving rod mill discharge results", NotificationSeverity.Error);
                return;
            }
        }
        catch (Exception ex)
        {
            AlertMessage($"Error: {ex.Message} | Detail: {ex.InnerException ?? null}", NotificationSeverity.Error);
        }
    }

    void AlertMessage(string msg, NotificationSeverity severity)
    {
        ShowNotification(new NotificationMessage
            {
                Severity = severity,
                Summary = "Reconcilor",
                Detail = $"{msg ?? "No message"}",
                Duration = 4000
            });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        // if (args?.Value == "csv")
        // {
        //     await ReconcilorService.ExportRMDsToCSV(new Query
        //         {
        //             Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter) ? "true" : grid0.Query.Filter)}",
        //             OrderBy = $"{grid0.Query.OrderBy}",
        //             Expand = "",
        //             Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))
        //         }, "RMDs");
        // }

        // if (args == null || args.Value == "xlsx")
        // {
        //     await ReconcilorService.ExportRMDsToExcel(new Query
        //         {
        //             Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter) ? "true" : grid0.Query.Filter)}",
        //             OrderBy = $"{grid0.Query.OrderBy}",
        //             Expand = "",
        //             Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))
        //         }, "RMDs");
        // }
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, RMD rmd)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await _repository.DeleteDataAsync<RMD>(id: rmd.Id);

                if (deleteResult != null)
                {
                    await dataGrid.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete RMD"
                });
        }
    }
}